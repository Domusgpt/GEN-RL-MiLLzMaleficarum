<<<<<<< HEAD
const express = require('express');
const multer = require('multer');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const app = express();
const PORT = process.env.PORT || 8080;
const DATA_DIR = path.join(__dirname, 'data');
const DATA_FILE_PATH = path.join(DATA_DIR, 'current_magazine_data.json');
const PUBLIC_DIR = path.join(__dirname, 'public');
if (!fs.existsSync(DATA_DIR)){ fs.mkdirSync(DATA_DIR); }
if (!fs.existsSync(DATA_FILE_PATH)){ const initialData = { cycleNumber: 0, transmissionDate: "INIT", layoutConfiguration: { templateName: "standard-grid", featuredVisualTargetId: null, moduleOrder: [] }, mainContent: [{type: "directive", id:"init", title:"// STANDBY //", content:"<p>Awaiting transmission...</p>"}], footerMantra: "// AWAIT SIGNAL //", styleOverrides: {} }; try { fs.writeFileSync(DATA_FILE_PATH, JSON.stringify(initialData, null, 2), 'utf8'); console.log(`Created initial: ${DATA_FILE_PATH}`); } catch (err) { console.error(`Failed init data: ${err}`); }}
app.use(cors());
app.use('/dashboard', express.static(path.join(PUBLIC_DIR)));
app.get('/dashboard', (req, res) => { res.sendFile(path.join(PUBLIC_DIR, 'dashboard.html')); });
app.use(express.static(PUBLIC_DIR)); app.use(express.json());
const storage = multer.memoryStorage();
const upload = multer({ storage: storage, limits: { fileSize: 5 * 1024 * 1024 }, fileFilter: (req, file, cb) => { if (file.mimetype === 'application/json') { cb(null, true); } else { cb(new Error('Only JSON allowed.'), false); } } });
app.post('/upload', upload.single('magazineDataFile'), (req, res) => { if (!req.file) return res.status(400).json({ success: false, message: 'No file.' }); try { const parsedData = JSON.parse(req.file.buffer.toString('utf8')); const requiredKeys = ['cycleNumber', 'transmissionDate', 'layoutConfiguration', 'mainContent', 'footerMantra', 'styleOverrides']; if (!requiredKeys.every(key => parsedData.hasOwnProperty(key)) || !Array.isArray(parsedData.mainContent)) throw new Error('Invalid JSON structure.'); if (parsedData.mainContent.some(item => !item.id || !item.type)) throw new Error('mainContent items need id/type.'); fs.writeFileSync(DATA_FILE_PATH, JSON.stringify(parsedData, null, 2), 'utf8'); console.log(`Updated Cycle ${parsedData.cycleNumber}`); res.status(200).json({ success: true, message: `Cycle ${parsedData.cycleNumber} uploaded!` }); } catch (error) { console.error('Upload Err:', error.message); let s=500; let m='Server error.'; if(error instanceof SyntaxError){s=400;m='Invalid JSON.';} else if(error.message.includes('Invalid')){s=400;m=error.message;} res.status(s).json({ success: false, message: m }); }});
app.get('/api/current-data', (req, res) => { try { if (!fs.existsSync(DATA_FILE_PATH)) return res.status(404).json({ message: 'Data not found.' }); res.setHeader('Content-Type', 'application/json'); fs.createReadStream(DATA_FILE_PATH).pipe(res); } catch (error) { console.error('API Err:', error); res.status(500).json({ message: 'Error getting data.' }); }});
app.get('*', (req, res) => { if (!req.path.startsWith('/api/') && req.path !== '/upload' && req.path !== '/dashboard') { res.sendFile(path.join(PUBLIC_DIR, 'index.html')); } else { res.status(404).send('Not Found'); }});
app.use((err, req, res, next) => { console.error("Unhandled Error:", err.stack || err); res.status(500).send('Error!'); });
app.listen(PORT, () => { console.log(`Server on port ${PORT}...`); });
=======
const express=require('express');const multer=require('multer');const cors=require('cors');const fs=require('fs');const path=require('path');const app=express();const PORT=process.env.PORT||8080;const DATA_DIR=path.join(__dirname,'data');const DATA_FILE_PATH=path.join(DATA_DIR,'current_magazine_data.json');const PUBLIC_DIR=path.join(__dirname,'public');if(!fs.existsSync(DATA_DIR)){fs.mkdirSync(DATA_DIR);console.log(`Created data directory: ${DATA_DIR}`);}
if(!fs.existsSync(DATA_FILE_PATH)){const initialData={cycleNumber:0,transmissionDate:"INITIALIZING... STANDBY",layoutConfiguration:{templateName:"standard-grid",featuredVisualTargetId:"init",moduleOrder:["init"]},mainContent:[{type:"directive",id:"init",title:"// STANDBY :: AWAITING DIRECTIVE //",content:"<p>Transmission channel open. Awaiting first communique from GEN-R-L MiLLz under the auspices of GEN-RL-M-S-R-E.</p>"}],footerMantra:"// CHANNEL OPEN :: MAINTAIN VIGILANCE //",styleOverrides:{}};try{fs.writeFileSync(DATA_FILE_PATH,JSON.stringify(initialData,null,2),'utf8');console.log(`Created initial data file: ${DATA_FILE_PATH}`);}catch(err){console.error(`Failed to create initial data file: ${err}`);}}
app.use(cors());app.get('/dashboard',(req,res)=>{res.sendFile(path.join(PUBLIC_DIR,'dashboard.html'));});app.use(express.static(PUBLIC_DIR));app.use(express.json());const storage=multer.memoryStorage();const upload=multer({storage:storage,limits:{fileSize:5*1024*1024},fileFilter:(req,file,cb)=>{if(file.mimetype==='application/json'){cb(null,true);}else{cb(new Error('Invalid file type. Only JSON is allowed.'),false);}}});
app.post('/upload',upload.single('magazineDataFile'),(req,res)=>{if(!req.file)return res.status(400).json({success:false,message:'No file uploaded.'});try{const parsedData=JSON.parse(req.file.buffer.toString('utf8'));const requiredKeys=['cycleNumber','transmissionDate','layoutConfiguration','mainContent','footerMantra','styleOverrides'];if(!requiredKeys.every(key=>parsedData.hasOwnProperty(key))||!Array.isArray(parsedData.mainContent))throw new Error('Invalid JSON structure: Missing top-level keys or mainContent array.');if(parsedData.mainContent.some(item=>!item.id||!item.type))throw new Error('Invalid JSON: mainContent items missing "id" or "type".');if(parsedData.layoutConfiguration?.featuredVisualTargetId&&!parsedData.mainContent.some(item=>item.id===parsedData.layoutConfiguration.featuredVisualTargetId))console.warn(`Warning: featuredVisualTargetId "${parsedData.layoutConfiguration.featuredVisualTargetId}" not found.`);fs.writeFileSync(DATA_FILE_PATH,JSON.stringify(parsedData,null,2),'utf8');console.log(`Updated ${DATA_FILE_PATH} with Cycle ${parsedData.cycleNumber}`);res.status(200).json({success:true,message:`Data for Cycle ${parsedData.cycleNumber} uploaded!`});}catch(error){console.error('Upload Error:',error.message);let status=500;let message='Server error processing file.';if(error instanceof SyntaxError){status=400;message='Invalid JSON format.';}else if(error.message.includes('Invalid file type')){status=400;message=error.message;}else if(error.message.includes('Invalid JSON')){status=400;message=error.message;}res.status(status).json({success:false,message:message});}});
app.get('/api/current-data',(req,res)=>{try{if(!fs.existsSync(DATA_FILE_PATH))return res.status(404).json({message:'Magazine data not found.'});res.setHeader('Content-Type','application/json');fs.createReadStream(DATA_FILE_PATH).pipe(res);}catch(error){console.error('API Error:',error);res.status(500).json({message:'Error retrieving magazine data.'});}});
app.get('*',(req,res)=>{if(req.path.startsWith('/api/')||req.path==='/upload'||req.path==='/dashboard'){return res.status(404).send('Backend resource not found');}res.sendFile(path.join(PUBLIC_DIR,'index.html'));});
app.use((err,req,res,next)=>{console.error("Unhandled Error:",err.stack||err);if(err instanceof multer.MulterError){if(err.code==='LIMIT_FILE_SIZE')return res.status(400).json({success:false,message:'File too large.'});}else if(err.message.includes('Invalid file type'))return res.status(400).json({success:false,message:err.message});res.status(500).send('Internal Server Error!');});
app.listen(PORT,()=>{console.log(`\n--- GEN-R-L MiLLz Maleficarum Backend ---`);console.log(`--- Published by GEN-RL-M-S-R-E ---`);console.log(`Live Magazine Root: http://localhost:${PORT}/`);console.log(`Dashboard: http://localhost:${PORT}/dashboard`);console.log(`API: http://localhost:${PORT}/api/current-data`);console.log(`Listening on port ${PORT}...\n`);});
>>>>>>> origin/main
